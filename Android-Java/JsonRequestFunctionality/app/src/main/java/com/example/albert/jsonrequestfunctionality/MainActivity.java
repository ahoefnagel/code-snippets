package com.example.albert.jsonrequestfunctionality;

import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.widget.ArrayAdapter;
import android.widget.ListView;

import com.example.albert.jsonrequestfunctionality.adapters.UsersAdapter;
import com.example.albert.jsonrequestfunctionality.models.User;
import com.google.gson.Gson;

import org.json.JSONException;
import org.json.JSONObject;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URL;
import java.util.ArrayList;
import java.util.Arrays;

import javax.net.ssl.HttpsURLConnection;

public class MainActivity extends AppCompatActivity {

    // A list of all users
    ArrayList users;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        // Creation of the default ContentView and run the super(parent) code.
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        // Create a async thread for the json request calling.
        Thread thread;
        thread = new Thread(new Runnable() {
            public void run() {
                try {
                    // Declare a new GSON object, https://github.com/google/gson.
                    Gson gson = new Gson();

                    //Return a valid JSON string in the variable json_users.
                    String json_users = getJSONStringFromURL("https://jsonplaceholder.typicode.com/users");
                    // Fill the user ArrayList with the JSON parsed object data of the User[] array
                    // that is generated by the gosn object.
                    users = new ArrayList<User>(Arrays.asList(gson.fromJson(json_users, User[].class)));

                }catch(Exception ex){ ex.printStackTrace();}
            }
        });
        // Start the new thread and run the code.
        thread.start();

        // Join the thread when it's done, meaning that the application will wait untill the
        // thread is done.
        try {
            thread.join();
        }catch(Exception ex){ ex.printStackTrace();}

        // Find the listView and add a new adapter to it, controlling the items that will be added
        // and adding it to a new user item_user.
        ListView lv = findViewById(R.id.user_list_view);
        lv.setAdapter(new UsersAdapter(getBaseContext(), users));

    }

    // Almost the same as the getJSONStringFromURL function, but then returns a JSONObject
    public static JSONObject getJSONObjectFromURL(String urlString) throws IOException, JSONException {
        return new JSONObject(getJSONStringFromURL(urlString));
    }

    // A GET request for getting a JSON String from a given HTTPS url
    public static String getJSONStringFromURL(String urlString) throws IOException, JSONException {
        // The string parsed to a new URL
        URL url = new URL(urlString);
        // The https url connection
        HttpsURLConnection urlConnection = null;
        urlConnection = (HttpsURLConnection) url.openConnection();
        urlConnection.setRequestMethod("GET");
        urlConnection.setReadTimeout(10000 /* milliseconds */ );
        urlConnection.setConnectTimeout(15000 /* milliseconds */ );
        urlConnection.setDoOutput(true);
        urlConnection.connect();

        BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));
        StringBuilder sb = new StringBuilder();

        // Create a new string from the read input
        String line;
        while ((line = br.readLine()) != null) {
            sb.append(line);
        }
        br.close();

        String jsonString = sb.toString();
        System.out.println("JSON: " + jsonString);

        return jsonString;
    }

}
